function foveal_map = pool_dense_map(foveal_param_cheap,dense_map,peri_indx,foveal_indx,y_coord,x_coord,visual_toggle,y_lower_in,y_upper_in,x_lower_in,x_upper_in)

peri_height = foveal_param_cheap.peri_height;
peri_width = foveal_param_cheap.peri_width;

empty_image = uint8(zeros(foveal_param_cheap.peri_height,foveal_param_cheap.peri_width));

center_image_x = round(foveal_param_cheap.peri_width/2);
center_image_y = round(foveal_param_cheap.peri_height/2);

[h_size w_size NaN] = size(dense_map);

% This is not necessary:
img(:,:,1) = dense_map;
img(:,:,2) = dense_map;
img(:,:,3) = dense_map;

empty_image(center_image_y-y_coord:center_image_y-y_coord+h_size-1,center_image_x-x_coord:center_image_x-x_coord+w_size-1,1) = img(:,:,1);
empty_image(center_image_y-y_coord:center_image_y-y_coord+h_size-1,center_image_x-x_coord:center_image_x-x_coord+w_size-1,2) = img(:,:,2);
empty_image(center_image_y-y_coord:center_image_y-y_coord+h_size-1,center_image_x-x_coord:center_image_x-x_coord+w_size-1,3) = img(:,:,3);

if visual_toggle ==1
	figure;
	imshow(empty_image);
end

dense_map_Extended = double(zeros(peri_height,peri_width));
dense_map_Extended(center_image_y-y_coord:center_image_y-y_coord+h_size-1,center_image_x-x_coord:center_image_x-x_coord+w_size-1) = dense_map;

% Add NaN padding on target or prohibitive regions:

if ~isempty(y_lower_in) || ~isempty(y_upper_in) || ~isempty(x_lower_in) || ~isempty(x_upper_in)
	dense_map_Extended(center_image_y-y_coord+y_lower_in:center_image_y-y_coord+y_upper_in,center_image_x-x_coord+x_lower_in:center_image_x-x_coord+x_upper_in) = nan;
end


if visual_toggle == 1
	figure;
	imagesc(dense_map_Extended);
end

%Superimpose pooling regions over each map

% For this case superimpose with color map:
img_data = dense_map_Extended;
%%%%%%%%%%%%%%%%%%%%%

N_theta = foveal_param_cheap.N_theta;
N_e = foveal_param_cheap.N_e;

visual_mask = 0;

%Write overlap of foveal filter on top of image stimuli  
if visual_mask == 1
	alpha_value = 0.7;

	foveal_map_colored2 = double(zeros([peri_height,peri_width,3]));
	c_map = hsv(N_theta*N_e);

	%Paint unique pixels
	for i1=1:N_theta
		for j1=1:N_e
			for z1=1:size(foveal_param_cheap.peripheral_filters.uniq_pix{i1,j1},1)
				foveal_map_colored2(foveal_param_cheap.peripheral_filters.uniq_pix{i1,j1}(z1,1),foveal_param_cheap.peripheral_filters.uniq_pix{i1,j1}(z1,2),1) = c_map((i1-1)*N_e+j1,1);
				foveal_map_colored2(foveal_param_cheap.peripheral_filters.uniq_pix{i1,j1}(z1,1),foveal_param_cheap.peripheral_filters.uniq_pix{i1,j1}(z1,2),2) = c_map((i1-1)*N_e+j1,2);
				foveal_map_colored2(foveal_param_cheap.peripheral_filters.uniq_pix{i1,j1}(z1,1),foveal_param_cheap.peripheral_filters.uniq_pix{i1,j1}(z1,2),3) = c_map((i1-1)*N_e+j1,3);
			end
		end
	end

	img0_overlap(:,:,1) = alpha_value*img_data + (1-alpha_value)*foveal_map_colored2(:,:,1);
	img0_overlap(:,:,2) = alpha_value*img_data + (1-alpha_value)*foveal_map_colored2(:,:,2);
	img0_overlap(:,:,3) = alpha_value*img_data + (1-alpha_value)*foveal_map_colored2(:,:,3);

	if visual_mask == 1
		figure;
		imshow(img0_overlap);
	end	
end


% Create empty Foveated map
Foveated_clutter_map = double(zeros(peri_height,peri_width));

% For all components at the same time:
for i=1:length(foveal_param_cheap.select_mask_stream)
	% Max pooling done here
	Foveated_clutter_map(peri_indx{i}) = nanmax(dense_map_Extended(peri_indx{i}));
end

Foveated_clutter_map = Foveated_clutter_map;

% Add the foveal mask.
% We essentially copy the original dense map ROI within the fovea.
Foveated_clutter_map(foveal_indx) = dense_map_Extended(foveal_indx);

if visual_toggle == 1
	figure;
	imagesc(Foveated_clutter_map)
end

% Crop Foveated map back to its original dimensions:
Crop_Foveated_clutter_map = Foveated_clutter_map(center_image_y-y_coord:center_image_y-y_coord+h_size-1,center_image_x-x_coord:center_image_x-x_coord+w_size-1);

% Final Output:
foveal_map = Crop_Foveated_clutter_map;

