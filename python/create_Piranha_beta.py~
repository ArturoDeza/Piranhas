# Python Script to initialize a Peripheral Architecture:
# Developed by Arturo Deza as part of the Piranhas Toolkit
# Questions & bugs: deza @ dyns.ucsb.edu

import numpy as np
import piranhas as pir
import math

# Start Computer parameters:

pixel_res_width = 800 # in pixels
pixel_res_height = 600 # in pixels
mon_width = 37.5 # in cm
mon_height = 30 # in cm
view_dist = 64 # in cm

computer_input = pir.monitor(pixel_res_width,pixel_res_height,mon_width,mon_height,view_dist)

# Start Human parameters:

visual_field_radius_in_deg = 10
fovea = 1.0
scale = 0.5

human_input = pir.param(computer_input,visual_field_radius_in_deg,fovea,scale)

N_param = pir.get_pooling_parameters(human_input.scale,human_input.e0_in_deg,human_input.visual_field_radius_in_deg,human_input.deg_per_pixel)

N_e = N_param[0]
N_theta = N_param[1]

# peripheral_filters. Optimize this and only make human input.
# The peripheral_regions data structure allows you to do anything you want with the pooling regions.
peripheral_filters = pir.generate_pooling_regions_vector_smooth(human_input.deg_per_pixel,N_e,N_theta,human_input.visual_field_radius_in_deg,human_input.fovea,human_input.e0_in_deg,human_input.visual)


##################################
# Compute Peripheral Mask Stream #
##################################

#This should probably be a function inside piranhas

# size might have changed after removing peripheral regions inside fovea
param_check = np.shape(peripheral_filters.regions)

N_theta = param_check[0]
N_e = param_check[1]
peri_height = param_check[2]
peri_width = param_check[3]

select_mask_stream = np.empty((N_theta*N_e,peri_height,peri_width),dtype=object)
select_mask_label = np.zeros((peri_height,peri_width))

for z in range(1,N_theta*N_e):
	i1 = np.mod(z,N_theta)
	if i1==0:
		i1 = N_theta
	
	j1 = np.round(np.floor((z-0.1)/N_theta)+1)
	select_mask_stream[z-1,:,:] = np.squeeze(peripheral_filters.regions[i1-1,j1-1,:,:])
	
	select_loc = np.where(select_mask_stream[z-1,:,:]>0)
	select_mask_label[select_loc[0],select_loc[1]] = z-1

###################
# Get Foveal Mask #
###################

dist_mask = np.empty(N_theta)
for i in range(0,N_theta):
	point_vector = np.empty(np.shape(peripheral_filters.offsets_r[i][0])[0])
	for j in range(0,np.shape(peripheral_filters.offsets_r[i][0])[0]):
		#Compute L2 norm (euclidean distance from center of fixation)
		point_buff = np.linalg.norm([peripheral_filters.offsets_r[i][0][j],peripheral_filters.offsets_c[i][0][j]])
		point_vector[j] = abs(point_buff)
	dist_mask[i] = min(point_vector)
	del point_vector

# Compute Foveal Radius
foveal_radius = np.ceil(np.mean(dist_mask))

foveal_radius_px = foveal_radius
foveal_radius_deg = foveal_radius * human_input.deg_per_pixel 

foveal_mask = np.zeros((peri_height,peri_width))

mid_point_w = np.round(peri_width/2)
mid_point_h = np.round(peri_height/2)

for i in range(0,peri_width):
	for j in range(0,peri_height):
		if np.sqrt(pow( i-mid_point_w,2) + pow(j-mid_point_h,2)) <= foveal_radius:
			foveal_mask[j][i] = 1


# Now setup the fovela input (final Architecture):
foveal_input = pir.foveal_param

foveal_input.N_theta = N_theta
foveal_input.N_e = N_e

# Dimensions of peripheral architecture:
foveal_input.peri_height = peri_height
foveal_input.peri_width = peri_width

#Get Peripheral + Fovela masks
foveal_input.select_mask_stream = select_mask_stream
foveal_input.select_mask_label = select_mask_label
foveal_input.foveal_mask = foveal_mask
foveal_input.foveal_radius_px = foveal_radius_px
foveal_input.foveal_radius_deg = foveal_radius_deg
foveal_input.peripheral_filters = peripheral_filters

foveal_input.visual_mask = human_input.visual_mask

foveal_input.deg_per_pixel = human_input.deg_per_pixel

foveal_input.monitor_settings.pixel_res_width = computer_input.pixel_res_width
foveal_input.monitor_settings.pixel_res_height = computer_.pixel_res_height
foveal_input.monitor_settings.mon_width = computer_input.mon_width
foveal_input.monitor_settings.mon_height = computer_input.mon_height
foveal_input.monitor_settings.view_dist = computer_input.view_dist

